IMU Class Documentation

To integrate the nav6 IMU into your robot control software, source code for a C++ class named IMU, which is based upon the WPI Library, is provided.

= Instantiating an IMU object =

To instantiate the IMU, the IMU constructor must be provided a pointer to an instance of the WPI Library *!SerialPort* class.

{{{
    // Instantiate Serial Port object

    // Serial settings are:
    // - Baud Rate:  57600
    // - Data Bits:  8
    // - Stop Bits:  1
    // - Parity:     None

    SerialPort *imu_serial_port = new SerialPort(57600);

    // Instantiate IMU object

    IMU *imu = new IMU(imu_serial_port);
}}}

= Verifying Connection =

The IMU::!IsConnected() method indicates whether data is successfully being received from the IMU.  Given the default update rate of 100Hz, the IMU::!IsConnected() method should return true within about 10 ms after the IMU object is instantiated.

The IMU::!GetUpdateCount() can be used to determine if new yaw/pitch/roll values have been received from the nav6 IMU since the last time this method was invoked.  Given the default update rate of 100Hz, the value returned from IMU::!GetUpdatedCount() should increment once every 10 milliseconds.

= Accessing Yaw, Pitch, Roll and Compass Heading values =

Four methods are provided to access the most recent Yaw, Pitch, Roll and Compass Heading values from the nav6 IMU:

  * IMU::!GetYaw()
  * IMU::!GetPitch()
  * IMU::!GetRoll()
  * IMU::!GetCompassHeading()

= Zeroing the Yaw Angle =

To set the yaw value to the current angle the nav6 IMU is currently pointing, invoke the IMU::ZeroYaw() method.  Once this invoked, the IMU::!GetYaw() method will return 0 until the IMU is rotated, at which point the changes will be relative to the newly set "zero" heading.